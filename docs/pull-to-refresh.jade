extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = '下拉刷新 | Framework7 文档';

block content
  .docs-demo-device
    iframe(width="320", height="548", frameborder="0", scrolling="on")
    .fade-overlay
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content.with-device
      .full-width
        h1 下拉刷新
        p 下拉刷新是一个特别的组件，可以用来初始化页面内容的刷新。
        h2 下拉刷新的HTML布局结构
        p 让我们来看一下如何把下拉刷新组件集成到页面中：
        pre
          code
            | &lt;div class="page"&gt;
            |   &lt;!-- Page content应该拥有"pull-to-refresh-content"类 --&gt;
            |   &lt;div class="page-content pull-to-refresh-content" data-ptr-distance="55"&gt;
            |     &lt;!-- 默认的下拉刷新层 --&gt;
            |     &lt;div class="pull-to-refresh-layer"&gt;
            |       &lt;div class="preloader"&gt;&lt;/div&gt;
            |       &lt;div class="pull-to-refresh-arrow"&gt;&lt;/div&gt;
            |     &lt;/div&gt;
            | 
            |     &lt;!-- 下面是正文 --&gt;
            |     &lt;div class="list-block"&gt;
            |       ...
            |     &lt;/div&gt;
            |   &lt;/div&gt;
            | &lt;/div&gt;   
        p 其中：
          ul
            li <code>page-content</code>需要额外添加<code>pull-to-refresh-content</code>类，它会开启下拉刷新。
            li <code>pull-to-refresh-layer</code> 平时隐藏的布局块，包含下拉刷新的可视元素：加载提示符和上/下箭头。
            li <code>data-ptr-distance="55"</code> 可以配置下拉刷新的下拉距离. 默认是 44px.
        h2 下拉刷新的行为顺序
        p 当用户开始下拉的时候， <b>pull-to-refresh-layer</b>会增加一个额外的 <b>pull-down</b> 类。
        p 当用户下拉使<b>pull-to-refresh-content</b>元素下降超过44px时(即<b>pull-to-refresh-layer</b>元素完全可视)，<b>pull-to-refresh-layer</b>元素将自动添加"<b>pull-up</b>"类，使箭头转向180度，以提醒用户界面将在他松开手指时刷新。
        p 当用户在“pull-up”状态释放下拉区块使页面刷新时，<b>pull-to-refresh-layer</b>区块将会添加一个"<b>refreshing</b>"类。在“refreshing”状态，箭头将会隐藏，同时会展现一个加载提示符。这个时候你通常需要进行Ajax异步请求并刷新页面内容。
        h2 下拉刷新事件
        p 以下是下拉刷新的特殊事件，用以帮助我们识别需要刷新界面的时机：
        table.events-table
          thead
            tr
              th 事件（Event）
              th 对象（Target）
              th 描述（Description）
          tbody
            tr
              td pullstart
              td Pull To Refresh content<span>&lt;div class="pull-to-refresh-content"&gt;</span>
              td Event will be triggered when you start to move pull to refresh content
            tr
              td pullmove
              td Pull To Refresh content<span>&lt;div class="pull-to-refresh-content"&gt;</span>
              td Event will be triggered during you move pull to refresh content
            tr
              td pullend
              td Pull To Refresh content<span>&lt;div class="pull-to-refresh-content"&gt;</span>
              td Event will be triggered when you release pull to refresh content
            tr
              td refresh
              td refreshdone
              td Pull To Refresh content<span>&lt;div class="pull-to-refresh-content"&gt;</span>
              td Event will be triggered after pull to refresh is done and it is back to initial state (after calling <b>pullToRefreshDone</b> method)
        h2 Reset Pull To Refresh
        p After we refreshed page content, we need to reset pull to refresh component to let user pull it again:
        .method-wrap
          p
            span.method myApp.pullToRefreshDone(<span>ptrContent</span>) 
            span - 重置特定的下拉刷新界面
          ul.method-parameters
            li
              span.parameter ptrContent
              |  - 我们想要重置的下拉刷新页面的<span class="parameter-type">HTML元素</span>或<span class="parameter-type">CSS选择器</span>
        h2 JS触发下拉刷新
        p 我们也可以通过下面的方法手工触发下拉刷新:
        .method-wrap
          p
            span.method myApp.pullToRefreshTrigger(<span>ptrContent</span>) 
            span - 触发特定界面的下拉刷新
          ul.method-parameters
            li
              span.parameter ptrContent
              |  - 我们想要触发的下拉刷新页面的<span class="parameter-type">HTML元素</span>或<span class="parameter-type">CSS选择器</span>
      h2(data-device-preview="../docs-demos/pull-to-refresh.html") 示例
      pre
        code
          | &lt;div class="page-content pull-to-refresh-content"&gt;
          |   &lt;div class="pull-to-refresh-layer"&gt;
          |     &lt;div class="preloader"&gt;&lt;/div&gt;
          |     &lt;div class="pull-to-refresh-arrow"&gt;&lt;/div&gt;
          |   &lt;/div&gt;
          |   &lt;div class="list-block media-list"&gt;
          |     &lt;ul&gt;
          |       &lt;li class="item-content"&gt;
          |         &lt;div class="item-media"&gt;&lt;img src="http://hhhhold.com/88/d/jpg?1" width="44"&gt;&lt;/div&gt;
          |         &lt;div class="item-inner"&gt;
          |           &lt;div class="item-title-row"&gt;
          |             &lt;div class="item-title"&gt;Yellow Submarine&lt;/div&gt;
          |           &lt;/div&gt;
          |           &lt;div class="item-subtitle"&gt;Beatles&lt;/div&gt;
          |         &lt;/div&gt;
          |       &lt;/li&gt;
          |       ...
          |     &lt;/ul&gt;
          |     &lt;div class="list-block-label"&gt;
          |       &lt;p&gt;Just pull page down to let the magic happen.&lt;/p&gt;
          |     &lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/div&gt;          
      pre
        code
          | var myApp = new Framework7();
          | 
          | var $$ = Dom7;
          | 
          | // 随意编造的内容
          | var songs = ['Yellow Submarine', 'Don\'t Stop Me Now', 'Billie Jean', 'Californication'];
          | var authors = ['Beatles', 'Queen', 'Michael Jackson', 'Red Hot Chili Peppers'];
          | 
          | // 下拉刷新页面
          | var ptrContent = $$('.pull-to-refresh-content');
          | 
          | // 添加'refresh'监听器
          | ptrContent.on('refresh', function (e) {
          |     // 模拟2s的加载过程
          |     setTimeout(function () {
          |         // 随机图片
          |         var picURL = 'http://hhhhold.com/88/d/jpg?' + Math.round(Math.random() * 100);
          |         // 随机音乐
          |         var song = songs[Math.floor(Math.random() * songs.length)];
          |         // 随机作者
          |         var author = authors[Math.floor(Math.random() * authors.length)];
          |         // 列表元素的HTML字符串
          |         var itemHTML = '&lt;li class="item-content"&gt;' +
          |                           '&lt;div class="item-media"&gt;&lt;img src="' + picURL + '" width="44"/&gt;&lt;/div&gt;' +
          |                           '&lt;div class="item-inner"&gt;' +
          |                             '&lt;div class="item-title-row"&gt;' +
          |                               '&lt;div class="item-title"&gt;' + song + '&lt;/div&gt;' +
          |                             '&lt;/div&gt;' +
          |                             '&lt;div class="item-subtitle"&gt;' + author + '&lt;/div&gt;' +
          |                           '&lt;/div&gt;' +
          |                         '&lt;/li&gt;';
          |         // 前插新列表元素
          |         ptrContent.find('ul').prepend(itemHTML);
          |         // 加载完毕需要重置
          |         myApp.pullToRefreshDone();
          |     }, 2000);
          | });
      .full-width.stop-scroll-device
        h2 销毁/禁用下拉刷新
        h2 有的时候你可能需要禁用下拉刷新。我们可以通过这个方法来做到：
        .method-wrap
          p
            span.method myApp.destroyPullToRefresh(<span>ptrContent</span>) 
            span - 销毁/禁用 下拉刷新
          ul.method-parameters
            li
              span.parameter ptrContent
              |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (CSS 选择器) 我们需要销毁/禁用的下拉刷新
        p And if we need to initialize/enable it again:
        p 然后我们可以再次初始化/启用它：
        .method-wrap
          p
            span.method myApp.initPullToRefresh(<span>ptrContent</span>) 
            span - 初始化/启用下拉刷新
          ul.method-parameters
            li
              span.parameter ptrContent
              |  - <span class="parameter-type">HTMLElement</span> or <span class="parameter-type">string</span> (with CSS Selector) 需要启用的下拉刷新
