extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = 'Ajax Pages | Framework7 Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content
      h1 Ajax Page
      p 我们有了一个有View和Page的应用结构，现在我们需要理解如何创建新的Page，以及Framework7是如何加载他们的。
      p 下面有两个重要的地方请注意：
      div.important-note.
        p <b>默认情况下 Framework7 会使用 Ajax 加载所有的页面</b>，除了带有 <b>external</b> class的链接（<b>&lt;a href="somepage.html" class="external"></b>）和没有正确 <b>href</b> 值的链接（比如是空的或者是 <b>#</b>）。
        p 在 <a href="init-app.html">初始化</a> 时候传递不同的 <b>ajaxLinks</b> 参数可以改变这个行为。
      p 所以我们如果需要创建一个链接指向 <code>about.html</code>，我们只需要按照平时一样写 <code>&lt;a&gt;</code>标签就可以：
      pre <code>&lt;a href="about.html"&gt;Go to About page&lt;/a&gt;</code>
      p 当我们点击这个链接的时候，Framework7会通过Ajax获取 <code>about.html</code>，解析它的内容，然后把它插入到DOM中，并且做一个动画切换到这个新页面。
      h2 Page 内部的结构
      p 因为Framework7有一个非常聪明的解析器，所以在内部页面中我们不需要完整的HTML结构（head,body,views,pages等)。比如 <code>about.html</code> 的内容：
      pre
        code.
          &lt;-- That is all we have in about.html file --&gt;
          &lt;div class="page" data-page="about"&gt;
          ... About page content goes here
          &lt;/div&gt;
      p 重点是，Framework7 解析器会尝试在ajax加载的页面中寻找 <code>&lt;div class="page"&gt;</code>，所以我们不需要完整的HTML结构。当然这不是强制的，你可以写出完整的页面结构。
      h2 多个Page的结构
      p 下面有一个复杂一点的情况。比如，我们有两个 <a href="views.html">初始化的View</a>。在我们的index文件中：
      pre
        code.
          &lt;body&gt;
            ...
            &lt;!-- Views --&gt;
            &lt;div class="views"&gt;
              &lt;!-- Left view --&gt;
              &lt;div class="view view-main left-view"&gt;
                &lt;!-- Navbar--&gt;
                &lt;!-- Pages --&gt;
                  &lt;a href="about.html"&gt; About &lt;/a&gt;
                &lt;!-- Toolbar--&gt;
              &lt;/div&gt;
              &lt;!-- Right view --&gt;
              &lt;div class="view right-view"&gt;
                &lt;!-- Navbar--&gt;
                &lt;!-- Pages --&gt;
                  &lt;a href="about.html"&gt; About &lt;/a&gt;
                &lt;!-- Toolbar--&gt;
              &lt;/div&gt;          
            &lt;/div&gt;
            ...
          &lt;/body&gt;
      p 如上例所示，我们有两个View，并且她们都有一个链接指向 <code>about.html</code>。并且，我们希望在不同的 View 中跳转到 <code>about.html</code> 页面时显示的是不同的内容。
      p 我们看看这种情况下 <code>about.html</code> 应该是什么样的：
      pre
        code.
          &lt;!-- Left view --&gt;
          &lt;div class="view view-main left-view"&gt;
            &lt;div class="page" data-page="about-right"&gt;
              ... This page will be loaded when you click about.html link from Left view ...
            &lt;/div&gt;          
          &lt;/div&gt;
          &lt;!-- Right view --&gt;
          &lt;div class="view right-view"&gt;
            &lt;div class="page" data-page="about-right"&gt;
              ... This page will be loaded when you click about.html link from Right view ...
            &lt;/div&gt;          
          &lt;/div&gt;
      p 最关键的地方是，在 <code>about.html</code> 中的两个view应该和主页中的view有相同的class。这样Framework7就知道应该哪一个page应该放在哪一个view中。
      h2 动态导航栏的文件结构
      p 在<a href="navbar-toolbar-layouts.html">导航栏和工具栏布局类型</a>中，你会看到动态导航栏需要 through-type 布局。但是这种布局类型的工具栏不在Page中，所以我们需要放在放在 <code>about.html</code> 中的正确位置：
      pre
        code
          | &lt;!-- Left view --&gt;
          | &lt;div class="view view-main left-view"&gt;
          |   &lt;div class="page" data-page="about-right"&gt;
          |     ... This page will be loaded when you click about.html link from Left view ...
          |   &lt;/div&gt;          
          | &lt;/div&gt;
          | &lt;!-- Right view --&gt;
          | &lt;div class="view right-view"&gt;
          |   &lt;div class="page" data-page="about-right"&gt;
          |     ... This page will be loaded when you click about.html link from Right view ...
          |   &lt;/div&gt;          
          | &lt;/div&gt; 
      p 这里需要注意的是，page 必须包含在一个和需要跳转的view相同class的view中。这样F7就可以知道需要跳转到哪一个view。
      h2 动态导航栏的内部结构
      p.ios-only 只在 iOS 主题中支持
      p 就像你在 <a href="navbar-toolbar-layouts.html">Nabvar & Toolbar 布局类型</a> 中看到的，动态导航栏需要 through-type 布局. 但是这种布局下 navbar 并不在 page 内部。所以我们要这样放：
      pre
        code
          | &lt;div class="navbar"&gt;
          |   ... Navbar content goes here
          | &lt;/div&gt;
          | 
          | &lt;div class="page" data-page="about"&gt;
          |   ... About page content goes here
          | &lt;/div&gt;
      p 重点是我们要把 navbar 放在 page 内容旁边。 如果你有多个 page 和 navbar，那么向之前的例子一样把它们放在不同的 view 中。
      h2 后退
      p 现在我们知道怎么加载页面了，那么我们要怎么通过相反的动画回到上一个页面呢。
      p 其实很简单，我们只需要给一个链接加上 <b>back</b> 类就行了。下面是 <code>about.html</code> 页面中点击 后退按钮返回 <code>index.html</code> 页面。
      pre
        code
          | &lt;div class="page" data-page="about"&gt;
          |   &lt;!-- Just add additional "back" class to link --&gt;
          |   &lt;a href="index.html" class="back"&gt; Go back to home page &lt;/a&gt;
          | &lt;/div&gt;
      p 关于后退链接几个需要注意的地方：
      .important-note
        ul
          li
            p 如果在浏览历史中有页面，Framework7会忽略掉 <b>href</b> 属性中的值。
          li
            p 如果在浏览历史中没有页面（比如你在首页点了后退），Framework7 会加载 href 属性指定的url。
            p 你无法改变上述行为。
      p 对后退链接来说， <code>href</code> 属性不是必须得，但是为了向下兼容，最好还是写上。
      h2 滑动后退
      p.ios-only 只在 iOS Theme 中可用
      p 如果你启用了 "swipeBackPage" <a href="init-app.html">应用参数</a>，那么你可以通过从左向右滑动来后退到上一个页面。但是有时候你会想在某些页面中禁用这个行为，这种情况下你只需要加一个 <b>no-swipeback</b> class 即可。
      pre
        code.
          &lt;div class="page no-swipeback"&gt;
              ...
          &lt;/div&gt;
      h2 取消/增加页面切换动画
      p 有时候你在加载页面或者后退的时候需要立刻执行，不想要一个切换的动画效果，可以通过增加一个 "no-animation" class 在链接上即可。
      pre
        code.
          &lt;div class="page" data-page="about"&gt;
            &lt;-- Add additional "no-anmation" class to link to diable animated page transition --&gt;
            &lt;a href="about.html" class="no-animation"&gt; Load About page immediately &lt;/a&gt;

            &lt;-- The same rule for back link --&gt;
            &lt;a href="index.html" class="back no-animation"&gt; Go back immediately &lt;/a&gt;
          &lt;/div&gt;
      p 如果我们已经全局禁用了动画，但是在某些链接上希望启用这些动画，那么我们可以给链接加上 "with-animation" class。
      pre
        code
          | &lt;div class="page" data-page="about"&gt;
          |   &lt;!-- Add additional "with-anmation" class to link to enable animated page transition --&gt;
          |   &lt;a href="about.html" class="with-animation"&gt; Load About page with animation &lt;/a&gt;
          | 
          |   &lt;!-- The same rule for back link --&gt;
          |   &lt;a href="index.html" class="back with-animation"&gt; Go back with animation &lt;/a&gt;
          | &lt;/div&gt;
      h2 通过 data 标签配置更多选项
      p 有时候我们希望在某些链接上有更多的配置，我们可以使用作为 <code>data-</code>属性来配置所有在<a href="views.html#view-navigation-methods"> 视图链接方法</a>中的参数，比如：
      pre
        code
          | &lt;!-- Refresh currently active page (reload from server) --&gt;
          | &lt;a href="about.html" data-reload="true" data-ignore-cache="true"&gt;Refresh page&lt;/a&gt;
          | 
          | &lt;!-- Go back but to another page, not to actual previous page in history. Such method also allows to jump back in history: --&gt;
          | &lt;a href="about.html" class="back" data-force="true"&gt;Back to About&lt;/a&gt;
          | 
          | &lt;!-- Load new page without animation --&gt;
          | &lt;a href="about.html" data-animate-pages="false"&gt;&lt;/a&gt;          
      .important-note
        p 注意这些属性在html中使用的时候是短横线分割，而不是驼峰命名：
        ul
          li animatePages - data-animate-pages
          li ignoreCache - data-ignore-cache
          li animatePages - data-animate-pages
          li contextName - data-context-name
          li reloadPrevious - data-reload-previous
      h2 用JS加载页面
      p It is possible to load page from HTML files using JavaScript API, not only using <code>&lt;a&gt;</code> tags. For this case we may use <code>.router.loadPage(url)</code> <a href="router-api.html#view-navigation-methods">View Navigation Methods</a>:
      p 可以通过 JS API 加载页面，而不仅仅是只能通过 <code>&lt;a&gt;</code> 标签。这种情况下，我们使用 <code>.router.loadPage(url)</code> 方法，<a href="router-api.html#view-navigation-methods">查看更多方法</a>
      pre
        code
          | // Initialize App  
          | var myApp = new Framework7();
          |         
          | // Initialize View          
          | var mainView = myApp.addView('.view-main')          
          |         
          | // Load page from about.html file to main View:
          | mainView.router.loadPage('about.html');
      p 注意，只有初始化完成的View才可以用此方法
      h2 通过 JS 后退
      p 你点击后退链接和直接调用 <code>.router.back()</code> 其实是一样的，<a href="router-api.html#view-navigation-methods">查看更多方法</a>:
      pre
        code
          | // Initialize App  
          | var myApp = new Framework7();
          |         
          | // Initialize View          
          | var mainView = myApp.addView('.view-main')          
          |         
          | // Go back on main View
          | mainView.router.back();
      p 前提是View必须已经初始化完成。
      h2 结论
      p Framework7 中，页面之间的链接和路由都是很简单的，你只需要记住：
      ul
        li
          p 你需要使用普通的 <code>&lt;a&gt;</code> 标签，她有一个href属性指向你需要加载的页面。
        li
          p 通过ajax加载的页面不需要有完整的HTML结构。只需要有 <b>&lt;div class="page"&gt;</b> (和 <b>&lt;div class="navbar"&gt;</b> 如果你需要动态的滚动条)
        li
          p 如果你在同一个文件中有多个Page，把他们用 <b>&lt;div class="view"&gt;</b> 包裹起来，并且给每一个View设置好正确的class。
        li
          p 只需给一个链接加上 back class (<b>&lt;a href="index.html" class="back"&gt;</b>)，她就会自动变成一个后退链接。
      h2 下一步
      p 让我们看看如果做 <a href="linking-views.html">View 间的链接</a>
